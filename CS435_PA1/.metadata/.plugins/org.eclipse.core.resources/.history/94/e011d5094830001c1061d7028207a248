package bloomfilters;

import java.util.BitSet;
import java.util.Random;

public class BloomFilterRan{
	
	  	
	  BitSet data;
	  int bitsPerElement;
	  int setSize;
	  int filterSize;
	  int numHashes;
	  int numData;
	  int p;
	  int a1=0,a2=0,b1=0,b2=0;

	  public BloomFilterRan(int setSize, int bitsPerElement) {
		  this.setSize = setSize;
		  this.bitsPerElement = bitsPerElement;
		  filterSize = setSize * bitsPerElement;
		  p = nextPrime(filterSize+1);
		  numHashes = (int) Math.log(2)*filterSize/setSize;
		  data = new BitSet();
		  numData = 0;
		  
		  Random r = new Random();
		  while(a1 == a2) {
			  a1 = r.nextInt(p-1);
			  a2 = r.nextInt(p-1);
		  }
		  while(b1 == b2) {
			  b1 = r.nextInt(p-1);
			  b2 = r.nextInt(p-1);		  
		  } 
	  }
	  
	  
	  private int nextPrime(int filterSize2) {
		boolean isPrime = false;
		int r = filterSize;
		while(!isPrime) {
			isPrime = primeCheck(++r);
		}
		return r;
	}


	private boolean primeCheck(int n) {
		if(n == 1) 
			return false;
		else if(n == 2 || n == 3) 
			return true;
		else if(n % 2 == 0 || n % 3 == 0) 
			return false;
		else {
			for(int i = 5; i*i < n+1; i += 6) {
				if(n % i == 0 || n % (i +2) == 0)
					return false;
			}
			return true;
		}
	}


	public int[] hashFunc(String s) {
		  int[] result = new int[numHashes];
		  int a = randHash(s, a1, b1);
		  int b = randHash(s, a2, b2);
		  
		  for(int i = 0; i < numHashes; i++) {
			  result[i] = (a * i + b) % p;
			  if(result[i] < 0)
				  result[i] =- result[i];
		  }
		  return result;
	  }
	  
	  public int randHash(String s, int a, int b) {
		  int hashVal = 0;
		  
		  for(int i = 0; i < s.length(); i++) {
			  char ch = s.charAt(i);
			  hashVal ^= ch;
			  hashVal = a + b * hashVal;
			  hashVal = hashVal % filterSize;
		  }
		  return hashVal;
	  }
	  
	  public void add(String s) {
		 s.getBytes();
		 String str = s.toLowerCase();
		 if(appears(str))
			 return;
		 int[] marks = hashFunc(str);
		 for(int i = 0; i < marks.length; i++) {
			 if(!data.get(marks[i]))
				 data.flip(marks[i]);
		 }
		 numData++;
	  }
	  
	  
	  public boolean appears(String s) {
		  String str = s.toLowerCase();
		  int[] marks = hashFunc(str);
		  
		  for(int i = 0; i < marks.length; i++) {
			  if(data.get(marks[i]))
				  return false;
		  }
		  return true;	    
	  }
	  
	  public int filterSize() {
		  return filterSize;
	  }
	  
	  public int dataSize() {
		  return numData;
	  }
	  
	  public int numHashes() {
		  return numHashes;
	  }
	  
	  public boolean getBit(int j){
	    if (!data.get(j)) 
	    	return false;
	    return true;
	  }
}