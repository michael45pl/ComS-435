package bloomfilters;

public class BloomFilterRan extends BloomFilter{
	
	public BloomFilterRan(int setSize, int bitsPerElement) {
		super(setSize, bitsPerElement);
		hashFuncs = new HashFunctionRan[numHashes];
		
		for(int i = 0; i < numHashes; i++) {
			hashFuncs[i] = new HashFunctionRan(filterSize);
		}
	}
	
	public void add(String s) {
		int key;
		s = s.toLowerCase();
		
		if(!appears(s)) {
			numData++;
		}
		
		for(int i = 0; i < numHashes; i++) {
			key = hashFuncs[i].hash(s);
			filter.set(HashFunction.mod(key, filterSize));
		}
	}
	
	public boolean appears(String s) {
		int key;
		s = s.toLowerCase();
		for(int i = 0; i < numHashes; i++) {
			key = hashFuncs[i].hash(s);
			if(!filter.get(HashFunction.mod(key, filterSize))){
				return false;
			}
		}
		return true;
	}
}