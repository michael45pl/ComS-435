package multisets;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class HelperFunctions {
	static final List<String> stopWords = new ArrayList<String>(Arrays.asList("the"));
	
	
	static int nextPrime(int n) {
		boolean done = false;

		while(!done) {
			if(isPrime(n)) {
				done = true;
			}else {
				if(n == 1 || n % 2 == 0) {
					n = n + 1;
				}else {
					n = n + 2;
				}
			}
		}
		return n;
	}

	private static boolean isPrime(int a) {
		if(a > 2 && a % 2 == 0) {//check divisible by 2
			return false;
		}
		int bound = (int) Math.sqrt(a) + 1;//get highest number that could be a factor
		for(int i = 3; i < bound; i+=2) {//start at 3 since checked 2 only check odd 
			if(a % i == 0) {//check number
				return false;
			}
		}
		return true;
	}

	public static ArrayList<ParameterPair> getParameters(int numPermutations, int numTerms) {
		ArrayList<ParameterPair> paraList = new ArrayList<ParameterPair>();
		Random randomGenerator = new SecureRandom();
		int tempA;
		int tempB;
		for(int i=0;i<numPermutations;i++){
			tempA = randomGenerator.nextInt(numTerms-1);
			tempB = randomGenerator.nextInt(numTerms-1);
			paraList.add(new ParameterPair(tempA,tempB));
		}
		return paraList;
	}
	
}
