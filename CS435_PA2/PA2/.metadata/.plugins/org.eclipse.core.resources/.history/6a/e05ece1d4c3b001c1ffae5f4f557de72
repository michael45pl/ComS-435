package multisets;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class MinHashTime {
	
	public void timer(String folderName, int numPermutations) throws IOException {		
		long timeStart;
		long timeEnd;
		
		timeStart = System.currentTimeMillis();
		MinHashSimilarities mhs = new MinHashSimilarities(folderName, numPermutations);
		timeEnd = System.currentTimeMillis();
		
		System.out.println("Time taken to construct MinHashSimilarities in millisconds is: " + (timeStart-timeEnd));
	
		
		ArrayList<Document> allDocuments = new ArrayList<>();
		Document tempD1;
		Document tempD2;
		float exactJacSimilarity;
		float approJacSimilarity;
		
		timeStart = System.currentTimeMillis();

		File folder = new File(folderName);	
		File[] listOfFiles = folder.listFiles();
		Document d;
		ArrayList<String> positions = new ArrayList<String>();
		for(int i=0;i<listOfFiles.length;i++){
			d = new Document(listOfFiles[i].getAbsolutePath());	
			allDocuments.add(d);
		}
		for(int i = 0; i < allDocuments.size(); i++){
			tempD1 = allDocuments.get(i);
			for(int j = i+1; j<allDocuments.size(); j++){
				tempD2 = allDocuments.get(j);
				exactJacSimilarity = tempD1.exactJaccard(tempD2);
			}
		}
		timeEnd = System.currentTimeMillis();
		
		System.out.println("Time taken to compute every exact Jaccard Similarity in millisconds is: " + (timeStart-timeEnd));
		
		timeStart = System.currentTimeMillis();
		MinHashSimilarities m = new MinHashSimilarities(folderName, numPermutations);
		timeEnd = System.currentTimeMillis();
		
		System.out.println("Time taken to estimate every pair of Jacard Similarity in millisconds is: " + (timeStart-timeEnd));
	
	}
}
