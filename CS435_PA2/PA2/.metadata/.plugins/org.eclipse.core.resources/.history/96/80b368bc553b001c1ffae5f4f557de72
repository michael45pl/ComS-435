package multisets;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeSet;

public class LSH {

	private int[][] minHashMatrix;
	private int bands;
	private String[] docNames;
	private ArrayList<HashMap<String,TreeSet<String>>> hashTableList;
	private HashMap<Pair, String> hashTable;
	
	public LSH(int[][] minHashMatrix, String[] docNames, int bands) {
		this.minHashMatrix = minHashMatrix;
		this.bands = bands;
		this.docNames = docNames;
		this.hashTableList = new ArrayList<HashMap<String,TreeSet<String>>>();
		
		int numPermutations = this.minHashMatrix.length;
		int rows = numPermutations/this.bands;
		
		HashMap<String,TreeSet<String>> tempHashMap;
		StringBuffer tempSB;
		TreeSet<String> tempLinkSet = null;
		
		for(int i=0;i<bands;i++){
			tempHashMap = new HashMap<String,TreeSet<String>>();
			for(int j=0;j<docNames.length;j++){
				tempSB = new StringBuffer();
				for(int r=0;r<rows;r++){
					tempSB.append(minHashMatrix[i*rows+r][j]);
					tempSB.append("$");
				}
				if(tempHashMap.containsKey(tempSB.toString())){
					tempLinkSet = tempHashMap.get(tempSB.toString());
				}else{
					tempLinkSet = new TreeSet<String>();
				}
				tempLinkSet.add(docNames[j]);
				tempHashMap.put(tempSB.toString(), tempLinkSet);
			}
			hashTableList.add(tempHashMap);
		}
		
		int leftRows = numPermutations - bands*rows;
		System.out.println("There are " + bands*rows +" permutations currently!");
		if(leftRows>0){
			tempHashMap = new HashMap<String,TreeSet<String>>();
			for(int j=0;j<this.docNames.length;j++){
				tempSB = new StringBuffer();
				for(int r=bands*rows;r<numPermutations;r++){
					tempSB.append(this.minHashMatrix[r][j]);
					tempSB.append("$");
				}
				if(tempHashMap.containsKey(tempSB.toString())){
					tempLinkSet = tempHashMap.get(tempSB.toString());
				}else{
					tempLinkSet = new TreeSet<String>();
				}
				tempLinkSet.add(this.docNames[j]);
				tempHashMap.put(tempSB.toString(), tempLinkSet);
			}
			hashTableList.add(tempHashMap);
		}
		
		
	}
	
	public ArrayList<String> retrieveSim(String docName) {
		return null;
	}
	
	
	/**
	 * Container object to store the band number and hash value.
	 * In LSH, the MinHash matrix is split into B bands: 1,2,...,B
	 * and each band is R-rows.  The R-rows in a band are hashed to
	 * get a hash value for that band.  This object stores the band
	 * Number and the hash value for that band.
	 * 
	 */
	public class Pair {
		int band;
		int hashVal;
		
		/**
		 * Creates a new container object.
		 * @param band Band integer.
		 * @param hashVal Hash value for that band.
		 */
		public Pair(int band, int hashVal) {
			this.band = band;
			this.hashVal = hashVal;
		}
		
		
		/**
		 * Returns the hash code of container for HashMaps.
		 * @return HashCode of Pair container.
		 */
		@Override 
		public int hashCode() {
			int hash = 5;
			hash = hash * band * hashVal;
			
			return(hash);
		}
		
		
		/**
		 * Compares equality against other Pair containers.
		 * @param The other object to check for equality
		 * @return True if band and hashvalue are equal, otherwise false.
		 */
		@Override
		public boolean equals(Object other) {
			if(other == null) return(false);
			if(other == this) return(true);
			if(!(other instanceof Pair)) return(false);
			
			Pair p = (Pair) other;
			return(band == p.band && hashVal == p.hashVal);
		}
		
		/**
		 * Gives a string representation of this object.
		 * @return String representation with band and hashvalue.
		 */
		@Override
		public String toString() {
			String s = "(" + band + "," + hashVal + ")";
			
			return(s);
		}
	}
	
}
