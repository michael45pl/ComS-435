package multisets;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;


public class HelperFunctions {
	static final List<String> stopWords = new ArrayList<String>(Arrays.asList("the"));
	
	
	private int nextPrime(int n) {
		boolean done = false;

		while(!done) {
			if(isPrime(n)) {
				done = true;
			}else {
				if(n == 1 || n % 2 == 0) {
					n = n + 1;
				}else {
					n = n + 2;
				}
			}
		}
		return n;
	}

	private boolean isPrime(int a) {
		if(a > 2 && a % 2 == 0) {//check divisible by 2
			return false;
		}
		int bound = (int) Math.sqrt(a) + 1;//get highest number that could be a factor
		for(int i = 3; i < bound; i+=2) {//start at 3 since checked 2 only check odd 
			if(a % i == 0) {//check number
				return false;
			}
		}
		return true;
	}
	
	public static boolean isStopWord(String s) {
		if(stopWords.contains(s) || s.length() <3)
			return true;
		return false;
	}
	
	public int numUnique(File folder) throws IOException {
		Set<String> s = new HashSet<String>();
		File[] docs = folder.listFiles();
		
		FileReader fr;
		BufferedReader br;
		for(int i = 0; i < docs.length; i++) {
			if(docs[i].isFile()) {
				fr = new FileReader(docs[i]);
				br = new BufferedReader(fr);
				
				String line;
				String[] words;
				while((line = br.readLine()) != null) {
					words = line.replaceAll("[.,:;']", "").toLowerCase().split("\\s+");
					for(int j = 0; j < words.length; j++) {
						if(!isStopWord(words[j]))
							s.add(words[j]);
					}
				}
				br.close();
			}
		}
		
		return s.size();
	}
	
	
	public static Set<String> UniqueWordList(String fileName) throws IOException {
		FileReader fr = new FileReader(fileName);
		BufferedReader b = new BufferedReader(fr);
		Set<String> s = new HashSet<String>();
		
		String line;
		String[] words;
		while((line = b.readLine()) != null) {
			words = line.replaceAll("[.,:;']", "").toLowerCase().split("\\s+");
			for(int i = 0; i < words.length; i++) {
				if(!isStopWord(words[i])) s.add(words[i]);
			}
		}
		b.close();
		
		return(s);
	}
	
	
}
